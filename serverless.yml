
service: aws-nodejs # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    tableName: ${self:custom.tableName}
    topic: 
      Ref: MyTopic

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ Rentals1Table, Arn ]
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - Ref: MyTopic

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: rentals1table
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

functions:
  hello:
    handler: handler.hello
    

resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  - Resources:
      MyTopic:
        Type: AWS::SNS::Topic
        Properties:
          DisplayName: 'rentals'
          TopicName: rentals
      LambdaTrigger:
        Type: AWS::Events::Rule
        Properties: 
          Description: "Triggers rentals Lambda"
          ScheduleExpression: "rate(5 minutes)"
          State: "ENABLED"
          Targets:
            - 
              Arn:
                Fn::GetAtt:
                  - "HelloLambdaFunction"
                  - "Arn"
              Id: "TargetFunctionV1"
              Input: '{"filters": {
              "postalCode": "v6b1s3",
              "kmFromPostalCode": "3",
              "minPrice": "1400",
              "maxPrice": "1850",
              "minSqft": "550"
            }}'
      PermissionForEventsToInvokeLambda: 
        Type: AWS::Lambda::Permission
        Properties: 
          FunctionName: 
            Ref: "HelloLambdaFunction"
          Action: "lambda:InvokeFunction"
          Principal: "events.amazonaws.com"
          SourceArn: 
            Fn::GetAtt: 
              - "LambdaTrigger"
              - "Arn"